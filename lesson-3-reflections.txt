When would you want to use a remote repository rather than keeping all your work
local?

It would be particularly useful when I'm working with other people. This allows us
to be on the same page and make changes concurrently and more efficiently. It would
also be good in case of system failure as a copy of my repository will be hosted in
a separate location.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Several reasons. First, I may be working on something that can't be public yet,
the code may not be production level yet, maybe its a feature that I don't want
to unveil yet, maybe there are some legal reason as to why it cannot be public yet. 

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Forks only happen on Github and are entirely performed by Github. Clones are
a similar process but one that is used to move repositoies to other directories
including Github. Branches are just new lines of commits that I wish to keep separate
and code in tandem.

What is the benefit of having a copy of the last known state of the remote
stored locally?

 It allows you to know when there are commits on both sides that need to be
 merged. It helps prevent it from overwritting a change without you realizing it
 due to a conflict.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

 I would have to use another form of version control. For coding it would be considerably
 harder but for other types of collaboration Google and Dropbox offer pretty intuitive
 products. You might be able to do code by updating .txt files but being able to see conflicts
 and have a more purposely made diff command is extremely helpful.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

I think the biggest time is when our master is already in production and we wouldn't want to
mess with it. Working on the master could create a bug and crash the whole system so it is
better to be able to work on a branch and do testing before making it into production. Another
advantage is that it allow us to create logical separation between proccesses if we are creating 
a new feature we might not want to get it mixed up with another feature or a bug fix. We would 
would work directly on the master when we are the sole contributor and it is the early stages.